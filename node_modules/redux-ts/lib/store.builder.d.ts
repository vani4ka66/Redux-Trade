import { DeepPartial, Middleware, Reducer, ReducersMapObject, StoreEnhancer } from 'redux';
import { ReducerBuilder, Store } from './';
interface StoreState {
    [key: string]: any;
}
declare type ReducerBuilderMap<S> = {
    [key in keyof S]: ReducerBuilder;
};
export declare class StoreBuilder<S extends StoreState> {
    private middlewares;
    private reducers;
    private reducerBuilders;
    private initialState;
    private enhancers;
    private composeEnhancers;
    constructor();
    /**
     * Register given middlewares.
     *
     * _Execution order will be same as registration order._
     *
     * @param {Middleware} middleware
     * @returns
     * @memberof StoreBuilder
     */
    withMiddleware(...middleware: Middleware[]): this;
    /**
     * Initial value of store state
     *
     * @param {DeepPartial<StoreType>} state
     * @returns
     * @memberof StoreBuilder
     */
    withInitialState(state: DeepPartial<S>): this;
    /**
     * Register pure redux reducer with given name
     *
     * @param {string} name Name of the reducer. _(should be same as store field name)_
     * @param {Reducer} reducer Reducer instance
     * @returns
     * @memberof StoreBuilder
     */
    withReducer(name: keyof S, reducer: Reducer): this;
    /**
     * Register *ReducerBuilder* instance
     *
     * @param {string} name Name of the reducer. _(should be same as store field name)_
     * @param {ReducerBuilder} reducerBuilder ReducerBuilder instance
     * @returns
     * @memberof StoreBuilder
     */
    withReducerBuilder(name: keyof S, reducerBuilder: ReducerBuilder): this;
    /**
     * Register list of pure reducer functions with given name
     *
     * @param {ReducersMapObject} reducers List of reducers
     * @returns
     * @memberof StoreBuilder
     */
    withReducersMap(reducers: ReducersMapObject): this;
    /**
     * Register list of ReducerBuilder objects with given name
     *
     * @param {ReducerBuilderMap} reducerBuilders List of ReducerBuilder objects
     * @returns
     * @memberof StoreBuilder
     */
    withReducerBuildersMap(reducerBuilders: ReducerBuilderMap<S>): this;
    /**
     * Register given enhancer
     *
     * _Execution order will be same as registration order._
     *
     * @param {StoreEnhancer} enhancer
     * @returns
     * @memberof StoreBuilder
     */
    withEnhancer(...enhancers: StoreEnhancer[]): this;
    /**
     * Enable chrome devtools
     *
     * @returns
     * @memberof StoreBuilder
     */
    withDevTools(): this;
    /**
     * Build an instance of store with configured values.
     *
     * @returns {Store<StoreType>}
     * @memberof StoreBuilder
     */
    build(): Store<S>;
}
export {};
